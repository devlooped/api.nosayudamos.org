// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NosAyudamos
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BandejaDeEntradaFeature : object, Xunit.IClassFixture<BandejaDeEntradaFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Inbox.feature"
#line hidden
        
        public BandejaDeEntradaFeature(BandejaDeEntradaFeature.FixtureData fixtureData, NosAyudamos_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("es-ES"), "Bandeja de entrada", "\tPara registrar a nuevos usuarios\r\n    Implementamos una bandeja de entrada\r\n    " +
                    "Que determina qué tipo de usuarios registrar", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("Un usuario no registrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Contacto inicial de un donatario")]
        [Xunit.TraitAttribute("FeatureTitle", "Bandeja de entrada")]
        [Xunit.TraitAttribute("Description", "Contacto inicial de un donatario")]
        [Xunit.InlineDataAttribute("Necesito ayuda", new string[0])]
        [Xunit.InlineDataAttribute("Ayuda", new string[0])]
        [Xunit.InlineDataAttribute("Dame plata", new string[0])]
        [Xunit.InlineDataAttribute("Prestame dinero", new string[0])]
        public virtual void ContactoInicialDeUnDonatario(string mensaje, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contacto inicial de un donatario", null, exampleTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 11
 testRunner.When(string.Format("Envia {0}", mensaje), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 12
 testRunner.Then("Recibe mensaje", "Gracias por tu mensaje! Por favor envianos una \r\nfoto de tu DNI para registrarte " +
                        "para recibir ayuda.", ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Contacto inicial con mensaje confuso")]
        [Xunit.TraitAttribute("FeatureTitle", "Bandeja de entrada")]
        [Xunit.TraitAttribute("Description", "Contacto inicial con mensaje confuso")]
        public virtual void ContactoInicialConMensajeConfuso()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contacto inicial con mensaje confuso", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 26
 testRunner.When("Envia mensaje", "Foo", ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 30
 testRunner.Then("Recibe mensaje", "Gracias por tu mensaje! Comentanos si necesitas \r\nayuda o estás interesando en ay" +
                        "udar a otros.", ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Contacto inicial de un donante")]
        [Xunit.TraitAttribute("FeatureTitle", "Bandeja de entrada")]
        [Xunit.TraitAttribute("Description", "Contacto inicial de un donante")]
        public virtual void ContactoInicialDeUnDonante()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contacto inicial de un donante", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
#line 37
 testRunner.When("Envia mensaje", "Quiero ayudar", ((TechTalk.SpecFlow.Table)(null)), "Cuando ");
#line hidden
#line 41
 testRunner.Then("Recibe mensaje", "Gracias por tu mensaje! Cuánto querés donar?", ((TechTalk.SpecFlow.Table)(null)), "Entonces ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BandejaDeEntradaFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BandejaDeEntradaFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
